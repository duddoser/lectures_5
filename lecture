````````` Про прошлый код `````````
===========> server.c <===========
- налажена портабельность
ssize_t
read(<>)
Если была нарушена работа и были прочитаны 200 байт, то функция возвращает 200 байт, а на следующем вызове возвращает -1.

socklen_t - размер адресса
/usr/include/netinet - там лежат заголовочные файлы(их описание) и всякие полезные штуки
#pragma comment - упрощает подключение библиотек
typedef int SOCKET; (инт заменяется сокетом)


==========> client.c <============

```````````````````````````````````

NAT (network addres t.)
Получатель ничего не знает про отправителя, используется таблица маршрутизации.
Port forwarding позволяет задать статическую таблицу.
recv
rsp, rbp, rip - регистры(?)
rip содержит адрес следующей инструкции
---------------------------------------

Данные в процессоре (?) считаются сверху вниз.
Пусть есть программа, где считывают введенные данные. 
char str[100]
fread(str, 1, 1000, stdin) 
при переполнении начнутся заполняться ячейки выше и выходить фигня.

ret (адрес возврата) 
objdump -d client |>
