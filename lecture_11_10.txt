=========> си <========= 

Этапы компиляции кода:
	1. препроцессинг
		- вставляем файлы из include
		- В результате препроцессинга не добавляется что-то новое. Комментарии удаляются/затираются
	2. трансляция: исходный код -> объектный
		- хедеры подставляются на этом этапе
	3. компоновка (линковка, linking)
		- все объекты соединяем воедино
		- формирование единого исполняемого файла из объектных файлов (и библиотек)
		- проблемы несовпадения типов могут появится на этом этапе
- Препроцессинг и трансляция могут происходить несколько раз 

#define <> - создают макросы (в си могут принимать аргументы) - не являются константами на уровне языка
	- если без аргумента, то можно считать константой 
#include <> - подключение библиотек?? - подставляет заголовочные файлы
#pragma
#ifdef
#defif 

*.i - ?

nm - утилита, позволяющая работать с символами файла
пример: nm -g one.o
T - функция
U - функция, на которую ссылается программа
cc -c -oprog   # вывод с именем файла модификация -o
-c - компиляция иначе доходит до этапа препроцессинга и трансляции
cc -c -o <имена файлов>


======> Makefile <=========
prog: one.o two.o
	cc -oprog one.o two.o

one.o: one.c
	cc -c -oone.o one.c

two.o: two.c
	cc -c -otwo. two.c  
-----------------------------------
make <...> может собирать все файлы или конкретный
cmake - генератор make файлов (упрощенно)

